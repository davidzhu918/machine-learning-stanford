function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
n = size(X, 2); % number of features

J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    
    new_theta = zeros(n, 1);
    
    % first compute summation, which is common across
    % all theta terms
    sum = 0;
    for i = 1:m
        vec = X(i, :);
        hyp = vec * theta;
        sum = sum + (hyp - y(i));
    end
    
    % then compute new theta simultaneously
    for j = 1:n
        new_theta(j) = theta(j) - (alpha .* sum ./ m) .* X
    end
        
        
        
    
    
    
    
    
    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
